#include <windows.h>  // for MS Windows
#include <GL/glut.h>  // GLUT, include glu.h and gl.h
#include<math.h>>

# define PI           3.14159265358979323846



GLfloat maxLength=400;
GLfloat maxFieldLength=15;
GLfloat maxWaterLength=maxFieldLength+10;
GLfloat maxSandLength=maxWaterLength+11;

GLfloat roadMidLine=6200;


GLfloat j = 0.0f;
GLfloat HOUR = 0.0f;
GLfloat MIN = 0.0f;
GLfloat SEC = 0.0f;


GLfloat position = 0.0f;
GLfloat speed = 0.12f;



GLfloat position2 = 0.0f;
GLfloat speed2 = 0.01f;





void update(int value) {

    if(position >3)
        position = 0.0f;

    position -= speed; //position=position-speed;1-.1=.9

	glutPostRedisplay();


	glutTimerFunc(100, update, 0);
}



//void update2(int value) {
//
//    if(position2 >3)
//        position2 = 0.0f;
//
//    position2 -= speed2; //position=position-speed;1-.1=.9
//
//	glutPostRedisplay();
//
//
//	glutTimerFunc(100, update2, 0);
//}



void Idle()
{
    glutPostRedisplay();//// marks the current window as needing to be redisplayed
}





void roads()

{
    glBegin(GL_QUADS);
    glColor3ub(83, 82, 83);

    glVertex2f(.5,maxLength);
    glVertex2f(-.5,maxLength);
    glVertex2f(-.5,-1);
    glVertex2f(.5,-1);

    glEnd();//Roads



    GLfloat yi=-0.90;
    GLfloat yy=-1;

    for(int i=0;i<=roadMidLine;i++){


        glLineWidth(4);//Roads Middle Line//Roads Middle Line//Roads Middle Line//Roads Middle Line
        glBegin(GL_LINES);
        glColor3ub(255, 255, 255 );
        glVertex2f(.0,yy);
        glVertex2f(.0,yi);
        glEnd();//Roads Middle Line

        yy=yi+0.1;
        yi=yi+0.15;


    }




    glLineWidth(3);
    glBegin(GL_LINES);
    glColor3ub(255, 255, 255);
    glVertex2f(-.47,maxLength);
    glVertex2f(-.47,-1);
    glEnd();// Roads Left Line

    glLineWidth(3);
    glBegin(GL_LINES);
    glColor3ub(255, 255, 255);
    glVertex2f(.47,maxLength);
    glVertex2f(.47,-1);
    glEnd();// Roads Right Line


//    //test object//test object//test object//test object//test object
//    glBegin(GL_QUADS);
//    glColor3ub(0,0,0);
//
//    glVertex2f(0.2,0.2);
//    glVertex2f(-0.2,0.2);
//    glVertex2f(-0.2,-0.2);
//    glVertex2f(0.2,-0.2);
//    glEnd();






}
void grassGreen(GLfloat x,GLfloat y)
{
    ///Left Grass 1
    glBegin(GL_POLYGON);
    glColor3ub(20, 90, 50);

    glVertex2f(x+.08,y+.2);
    glVertex2f(x+.16,y+.16);
    glVertex2f(x+.15,y+.21);
    glVertex2f(x+.21,y+.20);
    glVertex2f(x+.19,y+.26);
    glVertex2f(x+.24,y+.31);
    glVertex2f(x+.19,y+.34);
    glVertex2f(x+.22,y+.4);
    glVertex2f(x+.16,y+.39);
    glVertex2f(x+.17,y+.46);
    glVertex2f(x+.09,y+.43);
    glVertex2f(x+.06,y+.48);

    glVertex2f(x+.02,y+.43);
    glVertex2f(x-.04,y+.46);
    glVertex2f(x-.04,y+.4);
    glVertex2f(x-.1,y+.39);
    glVertex2f(x-.07,y+.33);
    glVertex2f(x-.12,y+.28);
    glVertex2f(x-.06,y+.26);
    glVertex2f(x-.09,y+.21);
    glVertex2f(x-.04,y+.23);
    glVertex2f(x-.06,y+.15);
    glVertex2f(x+0,y+.2);
    glEnd();

}



void boat(GLfloat x,GLfloat y)
{
    glBegin(GL_TRIANGLES);
    glColor3ub(255, 0, 0);
    glVertex2f(x-0.89f,y-0.62f);
    glVertex2f(x-0.78f,y-0.87f);
    glVertex2f(x-0.66f,y-0.62f);
    glEnd();//body white



    glBegin(GL_POLYGON);
    glColor3ub(255, 0, 0);
    glVertex2f(x-0.89f,y-0.62f);
    glVertex2f(x-0.66f,y-0.62f);
    glVertex2f(x-0.69f,y-0.35f);
    glVertex2f(x-0.86f,y-0.35f);
    glEnd();//body white



    glBegin(GL_QUADS);
    glColor3ub(235, 152, 78);
    glVertex2f(x-0.87f,y-0.62f);
    glVertex2f(x-0.68f,y-0.62f);
    glVertex2f(x-0.68f,y-0.43f);
    glVertex2f(x-0.87f,y-0.43f);
    glEnd();//body water colour



    glBegin(GL_POLYGON);
    glColor3ub(140, 215, 255);
    glVertex2f(x-0.87f,y-0.61f);
    glVertex2f(x-0.85f,y-0.57f);
    glVertex2f(x-0.71f,y-0.57f);
    glVertex2f(x-0.68f,y-0.61f);
    glEnd();//mirror



    glBegin(GL_QUADS);
    glColor3ub(9255, 109, 126);
    glVertex2f(x-0.86f,y-0.35f);
    glVertex2f(x-0.69f,y-0.35f);
    glVertex2f(x-0.72f,y-0.29f);
    glVertex2f(x-0.83f,y-0.29f);
    glEnd();//body sky



    glBegin(GL_QUADS);
    glColor3ub(62, 139, 181);
    glVertex2f(x-0.87f,y-0.50f);
    glVertex2f(x-0.81f,y-0.50f);
    glVertex2f(x-0.81f,y-0.43f);
    glVertex2f(x-0.87f,y-0.43f);
    glEnd();//sit left



    glBegin(GL_QUADS);
    glColor3ub(62, 139, 181);
    glVertex2f(x-0.75f,y-0.43f);
    glVertex2f(x-0.75f,y-0.50f);
    glVertex2f(x-0.69f,y-0.50f);
    glVertex2f(x-0.69f,y-0.43f);
    glEnd();//sit right
}






void field()
{
    //green field //green field //green field //green field //green field //green field
    glBegin(GL_QUADS);
    glColor3ub(20, 194, 8);

    glVertex2f(-1,maxFieldLength);
    glVertex2f(-1,-1);
    glVertex2f(-.5,-1);
    glVertex2f(-.5,maxFieldLength);
    glEnd();//Left Field

    glBegin(GL_QUADS);
    glColor3ub(20, 194, 8);

    glVertex2f(1,maxFieldLength);
    glVertex2f(1,-1);
    glVertex2f(.5,-1);
    glVertex2f(.5,maxFieldLength);
    glEnd();//Right Field//green field //green field //green field //green field //green field //green field






    //green grass //green grass //green grass //green grass //green grass //green grasss

    GLfloat gy=0;
    GLfloat gi=-0.5;


    for(int i=0;i<=roadMidLine;i++){


        grassGreen(0.7,gi);
        grassGreen(-0.8,gy);


        gi=gi+0.8;
        gy=gy+0.8;


    }





    //water////water////water////water////water////water////water////water////water//
    glBegin(GL_POLYGON);
    glColor3ub(90, 178, 241);

    glVertex2f(-1,maxWaterLength);
    glVertex2f(-1,maxFieldLength);
    glVertex2f(-.5,maxFieldLength);
    glVertex2f(-.5,maxWaterLength);
    glEnd();//Left Field

    glBegin(GL_POLYGON);
    glColor3ub(90, 178, 241);

    glVertex2f(1,maxWaterLength);
    glVertex2f(1,maxFieldLength);
    glVertex2f(.5,maxFieldLength);
    glVertex2f(.5,maxWaterLength);
    glEnd();//Right Field




    boat(0,maxWaterLength-1);


    boat(1.5,maxWaterLength-1.8);



    boat(0,maxWaterLength-3);

    boat(1.5,maxWaterLength-4);





    //sand//sand//sand//sand//sand//sand//sand//sand//sand//sand//sand//sand//sand//sand

    glBegin(GL_POLYGON);
    glColor3ub(245, 224, 169);

    glVertex2f(-1,maxSandLength);
    glVertex2f(-1,maxWaterLength);
    glVertex2f(-.5,maxWaterLength);
    glVertex2f(-.5,maxSandLength);
    glEnd();//Left //sand//sand//sand//sand//sand//sand//sand//sand//sand//sand//sand//sand//sand//sand

    glBegin(GL_POLYGON);
    glColor3ub(245, 224, 169);

    glVertex2f(1,maxSandLength);
    glVertex2f(1,maxWaterLength);
    glVertex2f(.5,maxWaterLength);
    glVertex2f(.5,maxSandLength);
    glEnd();//Right  /sand//sand//sand//sand//sand//sand//sand//sand//sand//sand//sand//sand//sand//sand



}

/*
void sand()
{
    glBegin(GL_POLYGON);
    glColor3ub(245, 176, 65);

    glVertex2f(-1,1);
    glVertex2f(-1,-1);
    glVertex2f(-.5,-1);
    glVertex2f(-.5,1);
    glEnd();//Left Field

    glBegin(GL_POLYGON);
    glColor3ub(245, 176, 65);

    glVertex2f(1,1);
    glVertex2f(1,-1);
    glVertex2f(.5,-1);
    glVertex2f(.5,1);
    glEnd();//Right Field
}

void water()
{
    glBegin(GL_POLYGON);
    glColor3ub(133, 193, 233);

    glVertex2f(-1,1);
    glVertex2f(-1,-1);
    glVertex2f(-.5,-1);
    glVertex2f(-.5,1);
    glEnd();//Left Field

    glBegin(GL_POLYGON);
    glColor3ub(133, 193, 233);

    glVertex2f(1,1);
    glVertex2f(1,-1);
    glVertex2f(.5,-1);
    glVertex2f(.5,1);
    glEnd();//Right Field
}
*/








void car()
{

    glBegin(GL_POLYGON);//Car main body
    glColor3ub(255, 0, 0);

    glVertex2f(-.06f,-.99f);
    glVertex2f(.06,-.99);
    glVertex2f(.06,-.8);
    glVertex2f(-.06,-.8);
    glEnd();




    glBegin(GL_POLYGON);//front Glass
    glColor3ub(0, 0, 0);

    glVertex2f(-.04f,-.85f);
    glVertex2f(.04,-.85);
    glVertex2f(.03,-.9);
    glVertex2f(-.03,-.9);
    glEnd();

    glBegin(GL_POLYGON);//BackGlass
    glColor3ub(0, 0, 0);

    glVertex2f(-.04f,-.97f);
    glVertex2f(.04,-.97);
    glVertex2f(.03,-.95);
    glVertex2f(-.03,-.95);
    glEnd();


     glBegin(GL_POLYGON);//Left Glass
    glColor3ub(0, 0, 0);

    glVertex2f(-.04f,-.96f);
    glVertex2f(-.03,-.94);
    glVertex2f(-.03,-.91);
    glVertex2f(-.04,-.87);
    glEnd();

    glBegin(GL_POLYGON);//Right Glass
    glColor3ub(0, 0, 0);

    glVertex2f(.04f,-.96f);
    glVertex2f(.03,-.94);
    glVertex2f(.03,-.91);
    glVertex2f(.04,-.87);
    glEnd();

    glLineWidth(2);//Left Front wheel
    glBegin(GL_LINES);
    glColor3ub(0,0,0);
    glVertex2f(-.06,-.82);
    glVertex2f(-.06,-.86);
    glEnd();

    glLineWidth(2);//Right Front wheel
    glBegin(GL_LINES);
    glColor3ub(0,0,0);;
    glVertex2f(.06,-.82);
    glVertex2f(.06,-.86);
    glEnd();

    glLineWidth(2);//Left Back wheel
    glBegin(GL_LINES);
    glColor3ub(0,0,0);
    glVertex2f(-.06,-.93);
    glVertex2f(-.06,-.97);
    glEnd();

    glLineWidth(2);//Right Back wheel
    glBegin(GL_LINES);
    glColor3ub(0,0,0);
    glVertex2f(.06,-.93);
    glVertex2f(.06,-.97);
    glEnd();


    glLineWidth(2);//Left Head Light
    glBegin(GL_LINES);
    glColor3ub(255,255,255);
    glVertex2f(-.055,-.8);
    glVertex2f(-.035,-.8);
    glEnd();

    glLineWidth(2);//Right Head Light
    glBegin(GL_LINES);
    glColor3ub(255,255,255);
    glVertex2f(.055,-.8);
    glVertex2f(.035,-.8);
    glEnd();

    glLineWidth(4);//Left Side Glass
    glBegin(GL_LINES);
    glColor3ub(255,0,0);
    glVertex2f(-.07,-.87);
    glVertex2f(-.055,-.87);
    glEnd();

    glLineWidth(4);//Right Side Glass
    glBegin(GL_LINES);
    glColor3ub(255,0,0);
    glVertex2f(.07,-.87);
    glVertex2f(.055,-.87);
    glEnd();

}











void display() {
	glClearColor(0.0f, 0.0f, 0.0f, 0.0f); // Set background color to black and opaque
	glClear(GL_COLOR_BUFFER_BIT);         // Clear the color buffer (background)





    glPushMatrix();
    glTranslatef(0,position,0);
    roads();
    field();
    glPopMatrix();



    glPushMatrix();
    glTranslatef(position2,0,0);
    car();
    glPopMatrix();






    //sand();
    //water();
    //boat();



	glFlush();  // Render now
}



void SpecialInput(int key, int x, int y)
{
    switch(key)
    {
        case GLUT_KEY_LEFT:
            if(position2 <-0.44f){
                    position2 = -0.44f;
                    glutPostRedisplay();
             }
            speed2 = 0.01f;
            position2=position2-speed2;
            glutPostRedisplay();



            break;

        case GLUT_KEY_RIGHT:
            if(position2 >0.44f){
                    position2 = 0.44f;
                    glutPostRedisplay();
             }
            speed2 = 0.01f;
            position2=position2+speed2;
            glutPostRedisplay();
            break;
    }

}

/* Main function: GLUT runs as a console application starting at main()  */
int main(int argc, char** argv) {
	glutInit(&argc, argv);
	glutInitWindowSize(400, 400);                 // Initialize GLUT
	glutCreateWindow("Mini Car Game"); // Create a window with the given title
	   // Set the window's initial width & height
	glutDisplayFunc(display);

    glutIdleFunc(Idle);

    glutTimerFunc(100, update, 0);
    //glutTimerFunc(100, update2, 0); // Register display callback handler for window re-paint
	//glutKeyboardFunc(handleKeypress);

	glutSpecialFunc(SpecialInput);
	glutMainLoop();           // Enter the event-processing loop
	return 0;
}

